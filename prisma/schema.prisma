// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  banned             Boolean         @default(false)
  verified           Boolean         @default(false)
  bookmarkPostsCount Int             @default(0)
  commentsCount      Int             @default(0)
  favoritePostsCount Int             @default(0)
  notesCount         Int             @default(0)
  pagesCount         Int             @default(0)
  postsCount         Int             @default(0)
  email              String
  displayName        String
  username           String
  password           String
  avatar             String?
  location           String?
  profile            String?
  createdAt          String
  bannedAt           String?     
  lastLoginAt        String
  updatedAt          String
  verifiedAt         String?
  comment            Comment[]
  notes              Note[]
  pages              Page[]
  posts              Post[]
  roles              RoleUser[]
  settings           UserSetting[]
  favoritePosts      FavoritePost[]
  bookmarkPosts      BookmarkPost[]

  @@unique([email], map: "unq_user_email")
  @@unique([username], map: "unq_user_username")
  @@index([banned], map: "idx_user_banned")
  @@index([bannedAt], map: "idx_user_bannedAt")
  @@index([createdAt], map: "idx_user_createdAt")
  @@index([lastLoginAt], map: "idx_user_lastLogin")
  @@index([updatedAt], map: "idx_user_updated")
  @@index([verified], map: "idx_user_verified")
  @@index([verifiedAt], map: "idx_user_verifiedAt")
  @@index([bookmarkPostsCount], map: "idx_user_bookmarks")
  @@index([commentsCount], map: "idx_user_comments")
  @@index([favoritePostsCount], map: "idx_user_favorite_posts")
  @@index([notesCount], map: "idx_user_notes")
  }

model Post {
  id             Int            @id @default(autoincrement())
  published      Boolean        @default(true)
  authorId       Int
  bookmarksCount Int            @default(0)
  commentsCount  Int            @default(0)
  favoritesCount Int            @default(0)
  viewsCount     Int            @default(0)
  createdAt      String
  publishedAt    String?
  updatedAt      String
  title          String
  body           String
  slug           String?
  search         String?
  meta           String?
  author         User           @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories     CategoryPost[]
  comments       Comment[]
  favorites      FavoritePost[]
  bookmarks      BookmarkPost[]

  @@unique([slug], map: "unq_post_slug")
  @@index([authorId], map: "idx_post_author")
  @@index([bookmarksCount], map: "idx_post_bookmarks_count")
  @@index([commentsCount], map: "idx_post_comments_count")
  @@index([favoritesCount], map: "idx_post_favorites_count")
  @@index([createdAt], map: "idx_post_created")
  @@index([published], map: "idx_post_published")
  @@index([publishedAt], map: "idx_post_publishedAt")
  @@index([updatedAt], map: "idx_post_updated")
  @@index([viewsCount], map: "idx_post_views_count")
  @@index([search], map: "idx_post_search")
}

model Page {
  id          Int       @id @default(autoincrement())
  published   Boolean   @default(true)
  authorId    Int
  createdAt   String
  publishedAt String?
  updatedAt   String
  viewsCount  Int       @default(0)
  title       String
  body        String
  slug        String
  summary     String?
  search      String?
  meta        String?
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([slug], map: "unq_page_slug")
  @@index([authorId], map: "idx_page_author")
  @@index([createdAt], map: "idx_page_created")
  @@index([published], map: "idx_page_published")
  @@index([publishedAt], map: "idx_page_publishedAt")
  @@index([updatedAt], map: "idx_page_updated")
  @@index([search], map: "idx_page_search")
  @@index([summary], map: "idx_page_summary")
  @@index([viewsCount], map: "idx_page_views_count")
}

model Role {
  id          Int             @id @default(autoincrement())
  active      Boolean         @default(true)
  name        String
  description String
  users       RoleUser[]
  privileges  RolePrivilege[]

  @@unique([name], map: "unq_role_name")
  @@index([active], map: "idx_role_active")
}

model RoleUser {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  roleId    Int
  userId    Int?
  createdAt String   
  updatedAt String   
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, userId], map: "unq_user_role")
  @@index([active], map: "idx_user_role_active")
  @@index([userId], map: "idx_user_role_user")
  @@index([createdAt], map: "idx_user_role_created")
  @@index([updatedAt], map: "idx_user_role_updated")
}

model Category {
  id          Int            @id @default(autoincrement())
  parentId    Int?
  postsCount  Int            @default(0)
  name        String
  slug        String
  path        String
  description String?
  parent      Category?      @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children    Category[]     @relation("CategoryToCategory")
  posts       CategoryPost[]

  @@unique([name], map: "unq_category_name")
  @@unique([slug], map: "unq_category_slug")
  @@unique([path], map: "unq_category_path")
  @@index([parentId], map: "idx_category_parent")
  @@index([postsCount], map: "idx_category_posts")
  @@index([description], map: "idx_category_description")
}

model CategoryPost {
  id       Int      @id @default(autoincrement())
  catId    Int
  postId   Int
  category Category @relation(fields: [catId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([catId, postId], map: "unq_category_post")
  @@index([catId], map: "idx_category_post_cat")
  @@index([postId], map: "idx_category_post")
}

model Comment {
  id             Int       @id @default(autoincrement())
  locked         Boolean   @default(false)
  pinned         Boolean   @default(false)
  authorId       Int
  createdAt      String
  updatedAt      String
  lastActivityAt String?
  parentId       Int?
  postId         Int
  repliesCount   Int       @default(0)
  path           String
  body           String
  search         String?
  meta           String?
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent         Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  post           Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies        Comment[] @relation("CommentToComment")

  @@index([authorId], map: "idx_comment_author")
  @@index([createdAt], map: "idx_comment_created")
  @@index([updatedAt], map: "idx_comment_updated")
  @@index([lastActivityAt], map: "idx_comment_last_activity")
  @@index([locked], map: "idx_comment_locked")
  @@index([pinned], map: "idx_comment_pinned")
  @@index([parentId], map: "idx_comment_parent")
  @@index([postId], map: "idx_comment_post")
  @@index([repliesCount], map: "idx_comment_replies_count")
  @@index([path], map: "idx_comment_path")
  @@index([search], map: "idx_comment_search")
}

model Note {
  id        Int         @id @default(autoincrement())
  pinned    Boolean     @default(false)
  authorId  Int
  createdAt String
  updatedAt String
  title     String?
  body      String
  search    String?
  meta      String?
  type      String
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  labels    NoteLabel[]

  @@index([authorId], map: "idx_note_author")
  @@index([createdAt], map: "idx_note_created")
  @@index([updatedAt], map: "idx_note_updated")
  @@index([pinned], map: "idx_note_pinned")
  @@index([title], map: "idx_note_title")
  @@index([search], map: "idx_note_search")
  @@index([type], map: "idx_note_type")
}

model Label {
  id          Int         @id @default(autoincrement())
  createdAt   String
  updatedAt   String
  notesCount  Int         @default(0)
  name        String
  slug        String?
  description String?
  notes       NoteLabel[]

  @@index([createdAt], map: "idx_label_created")
  @@index([updatedAt], map: "idx_label_updated")
  @@index([name], map: "idx_label_name")
  @@index([slug], map: "idx_label_slug")
}

model NoteLabel {
  id      Int   @id @default(autoincrement())
  noteId  Int
  labelId Int
  note    Note  @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label   Label @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([noteId, labelId], map: "unq_note_label")
  @@index([noteId], map: "idx_note_label_noteId")
  @@index([labelId], map: "idx_note_label_labelId")
}

model Setting {
  id          Int     @id @default(autoincrement())
  name        String
  value       String
  description String?
  type        String  @default("string")

  @@unique([name], map: "unq_setting_name")
  @@index([description], map: "idx_setting_description")
  @@index([type], map: "idx_setting_type")
}

model UserSetting {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  value  String
  type   String @default("string")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, name], map: "unq_user_setting_name")
  @@index([userId], map: "idx_user_setting_user")
  @@index([name], map: "idx_user_setting_name")
  @@index([type], map: "idx_user_setting_type")
}

model Privilege {
  id      Int             @id @default(autoincrement())
  subject String  
  action  String
  roles   RolePrivilege[]

  @@unique([subject, action], map: "unq_privilege")
  @@index([subject], map: "idx_privilege_subject")
  @@index([action], map: "idx_privilege_action")
}

model RolePrivilege {
  id          Int       @id @default(autoincrement())
  roleId      Int  
  privilegeId Int
  inverted    Boolean   @default(false)
  conditions  String?
  description String?
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  privilege   Privilege @relation(fields: [privilegeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([roleId], map: "idx_role_privilege_role")
  @@index([privilegeId], map: "idx_role_privilege")
  @@index([inverted], map: "idx_role_privilege_inverted")
  @@index([description], map: "idx_role_privilege_description")
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId], map: "unq_favorite_post")
  @@index([userId], map: "idx_favorite_post_user")
  @@index([postId], map: "idx_favorite_post_post")
  @@index([createdAt], map: "idx_favorite_post_created")
}

model BookmarkPost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId], map: "unq_bookmark_post")
  @@index([userId], map: "idx_bookmark_post_user")
  @@index([postId], map: "idx_bookmark_post_post")
  @@index([createdAt], map: "idx_bookmark_post_created")
}

model KJVBook {
  id     Int    @id @default(autoincrement())
  chs    Int
  book   String
  abbr   String
  slug   String
  verses KJVVerse[]

  @@unique([abbr], map: "unq_kjv_abbr")
  @@unique([book], map: "unq_kjv_book")
  @@unique([slug], map: "unq_kjv_slug")
}

model KJVVerse {
  id     Int      @id @default(autoincrement())
  bid    Int    
  ch     Int
  ver    Int
  txt    String
  coding String
  book   KJVBook @relation(fields: [bid], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([bid], map: "idx_kjv_verse_book")
  @@index([ch], map: "idx_kjv_verse_chapter")
  @@index([bid, ch], map: "idx_kjv_verse_book_chapter")
  @@index([txt], map: "idx_kjv_verse_text")
  @@index([coding], map: "idx_kjv_verse_coding")
}
